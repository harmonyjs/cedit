/**
 * Архитектурные правила для проекта cedit
 * 
 * Данный файл не только определяет правила для dependency-cruiser,
 * но и служит документацией по архитектурным принципам проекта.
 * 
 * ──────────────────────────────────────────────────────────────────────────────
 * 
 * Основные архитектурные принципы:
 * 
 * 1. Слабый coupling (низкая связность), высокий cohesion (высокая сплоченность)
 *    - Каждый модуль имеет четко определенную, сфокусированную ответственность
 *    - Модули взаимодействуют через минимальные интерфейсы
 * 
 * 2. Односторонние зависимости ("стрелки вниз")
 *    - Модули верхних слоев могут зависеть от нижних, но не наоборот
 *    - Низкоуровневые компоненты не знают о высокоуровневых
 * 
 * 3. Изоляция по "островам"
 *    - Каждый каталог является "островом" с собственным index.ts
 *    - Внешние компоненты импортируют только index.ts, не внутренние файлы модуля
 * 
 * 4. Чистая доменная модель
 *    - app/model содержит только чистые типы, без логики и зависимостей
 *    - Все остальные модули опираются на типы из app/model
 * 
 * 5. Полное разделение UI и бизнес-логики
 *    - UI знает о бизнес-логике, но не наоборот
 *    - Разные UI-компоненты не зависят друг от друга
 * 
 * ──────────────────────────────────────────────────────────────────────────────
 * 
 * Структура слоев (сверху вниз):
 * 
 * 1. UI слой (src/ui/*)
 *    - Отвечает за взаимодействие с пользователем
 *    - Включает CLI (командную строку) и TUI (интерактивный терминальный интерфейс)
 *    - Может импортировать любые нижележащие слои
 * 
 * 2. Доменный слой (src/app/*)
 *    - Содержит бизнес-логику приложения
 *    - Имеет внутреннюю иерархию:
 *      a. runner - оркестрирует весь процесс, использует editor и event bus
 *      b. editor - обрабатывает команды text_editor_tool
 *      c. bus - шина событий для слабосвязанного взаимодействия компонентов
 *      d. model - чистые доменные типы, не имеет зависимостей
 * 
 * 3. Инфраструктурный слой (src/infra/*)
 *    - Реализует технические детали и доступ к внешним сервисам
 *    - Компоненты:
 *      a. llm - интеграция с API Anthropic Claude
 *      b. storage - файловая система, бэкапы, диффы
 *      c. logging - единый интерфейс логирования через pino
 * 
 * ──────────────────────────────────────────────────────────────────────────────
 * 
 * Поток данных:
 * 
 * 1. UI (cli/tui) → 2. app/runner → 3. app/editor + infra/llm
 *                       ↓                 ↓
 *                   4. app/bus      5. infra/storage
 *                       ↓
 *                  6. UI (обновление)
 * 
 * ──────────────────────────────────────────────────────────────────────────────
 * 
 * Специальные правила и исключения:
 * 
 * 1. infra/logging - разрешен для импорта из любого модуля
 * 2. app/model - не имеет зависимостей от других модулей
 * 3. app/bus - используется для event-driven взаимодействия
 * 4. Циклические зависимости - строго запрещены везде
 * 5. UI модули (cli, tui) - не должны зависеть друг от друга
 * 6. Инфраструктурные модули - не должны зависеть друг от друга, кроме logging
 * 
 * ──────────────────────────────────────────────────────────────────────────────
 */

module.exports = {
  forbidden: [
    // Основные правила слоев архитектуры
    { 
      name: 'no-ui-in-core', 
      comment: 'Модули app и infra не должны знать о UI. Это обеспечивает независимость бизнес-логики от представления.',
      from: { path: '^src/(app|infra)' }, 
      to: { path: '^src/ui' }, 
      severity: 'error' 
    },
    { 
      name: 'no-import-into-app-model', 
      comment: 'Модель предметной области (app/model) содержит только чистые типы и интерфейсы без внешних зависимостей.',
      from: { pathNot: '^src/app/model' }, 
      to: { path: '^src/app/model' }, 
      severity: 'error' 
    },
    { 
      name: 'no-ui-cross-module-imports', 
      comment: 'UI модули (cli, tui) не должны зависеть друг от друга. Это позволяет независимо разрабатывать и тестировать разные интерфейсы.',
      from: { path: '^src/ui/cli/' }, 
      to: { path: '^src/ui/tui/' }, 
      severity: 'error' 
    },
    { 
      name: 'no-ui-cross-module-imports-reverse', 
      comment: 'UI модули (cli, tui) не должны зависеть друг от друга. Это позволяет независимо разрабатывать и тестировать разные интерфейсы.',
      from: { path: '^src/ui/tui/' }, 
      to: { path: '^src/ui/cli/' }, 
      severity: 'error' 
    },
    { 
      name: 'clack-only-in-tui', 
      comment: 'Библиотека интерактивных компонентов @clack должна использоваться только в TUI. CLI использует commander.',
      from: { path: '^src/ui/(?!tui)' }, 
      to: { path: '@clack' }, 
      severity: 'error' 
    },
    
    // Правила однонаправленных зависимостей
    { 
      name: 'app-model-has-no-deps', 
      comment: 'Доменная модель (app/model) не должна иметь внешних зависимостей вообще. Она содержит только чистые типы.',
      from: { path: '^src/app/model' }, 
      to: { path: '^(src|node_modules)(?!/app/model)' }, 
      severity: 'error' 
    },
    { 
      name: 'app-not-import-ui', 
      comment: 'Доменный слой (app) не должен зависеть от UI. Это дублирует правило no-ui-in-core, но явно для app.',
      from: { path: '^src/app' }, 
      to: { path: '^src/ui' }, 
      severity: 'error' 
    },
    { 
      name: 'infra-not-import-app', 
      comment: 'Инфраструктурный слой не должен зависеть от бизнес-логики, кроме типов из модели.',
      from: { path: '^src/infra' }, 
      to: { path: '^src/app(?!/model)' }, 
      severity: 'error' 
    },
    
    // Предотвращение циклических зависимостей
    { 
      name: 'no-circular-deps', 
      comment: 'Циклические зависимости запрещены везде. Они усложняют понимание, тестирование и рефакторинг.',
      from: {}, 
      to: { circular: true }, 
      severity: 'error' 
    },
    
    // Правила для модулей одного уровня
    { 
      name: 'infra-storage-not-import-infra-llm', 
      comment: 'Инфраструктурные модули должны быть независимыми друг от друга. Storage не должен зависеть от LLM.',
      from: { path: '^src/infra/storage' }, 
      to: { path: '^src/infra/llm' }, 
      severity: 'error' 
    },
    { 
      name: 'infra-llm-not-import-infra-storage', 
      comment: 'Инфраструктурные модули должны быть независимыми друг от друга. LLM не должен зависеть от Storage.',
      from: { path: '^src/infra/llm' }, 
      to: { path: '^src/infra/storage' }, 
      severity: 'error' 
    },
    
    // Разрешаем импорт logging из любого места
    { 
      name: 'logging-allowed-everywhere', 
      comment: 'Логирование - это сквозная функциональность, доступная для всех модулей. Severity info позволяет отслеживать использование.',
      from: {}, 
      to: { path: '^src/infra/logging' }, 
      severity: 'ignore' 
    },
    
    // Правила для слоя app
    { 
      name: 'app-editor-not-import-app-runner', 
      comment: 'Editor является более низкоуровневым, чем Runner. Runner оркестрирует процесс и использует Editor, но не наоборот.',
      from: { path: '^src/app/editor' }, 
      to: { path: '^src/app/runner' }, 
      severity: 'error' 
    },
    
    // Дополнительные правила для слоя app
    { 
      name: 'bus-not-import-editor-or-runner', 
      comment: 'Шина событий (app/bus) должна быть независима от бизнес-логики. Модули, использующие шину, импортируют её, а не наоборот.',
      from: { path: '^src/app/bus' }, 
      to: { path: '^src/app/(editor|runner)' }, 
      severity: 'error' 
    }
  ],
  options: {
    tsConfig: { fileName: './tsconfig.json' },
    doNotFollow: { path: 'node_modules' },
    exclude: {
      path: '\\.spec|\\.test'
    }
  }
};